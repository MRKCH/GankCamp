package com.speedystone.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cooke.gankcamp.beans.GankBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GANK_BEAN".
*/
public class GankBeanDao extends AbstractDao<GankBean, String> {

    public static final String TABLENAME = "GANK_BEAN";

    /**
     * Properties of entity GankBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Id = new Property(1, long.class, "id", false, "ID");
        public final static Property CreateAt = new Property(2, java.util.Date.class, "createAt", false, "CREATE_AT");
        public final static Property PublishedAt = new Property(3, java.util.Date.class, "publishedAt", false, "PUBLISHED_AT");
        public final static Property Soucre = new Property(4, String.class, "soucre", false, "SOUCRE");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property IsUsed = new Property(7, boolean.class, "isUsed", false, "IS_USED");
        public final static Property Author = new Property(8, String.class, "author", false, "AUTHOR");
        public final static Property Desc = new Property(9, String.class, "desc", false, "DESC");
        public final static Property IsHeaderTime = new Property(10, boolean.class, "isHeaderTime", false, "IS_HEADER_TIME");
        public final static Property IsCategory = new Property(11, boolean.class, "isCategory", false, "IS_CATEGORY");
    }


    public GankBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GankBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GANK_BEAN\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"CREATE_AT\" INTEGER," + // 2: createAt
                "\"PUBLISHED_AT\" INTEGER," + // 3: publishedAt
                "\"SOUCRE\" TEXT," + // 4: soucre
                "\"TYPE\" TEXT," + // 5: type
                "\"URL\" TEXT," + // 6: url
                "\"IS_USED\" INTEGER NOT NULL ," + // 7: isUsed
                "\"AUTHOR\" TEXT," + // 8: author
                "\"DESC\" TEXT," + // 9: desc
                "\"IS_HEADER_TIME\" INTEGER NOT NULL ," + // 10: isHeaderTime
                "\"IS_CATEGORY\" INTEGER NOT NULL );"); // 11: isCategory
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GANK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GankBean entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindLong(2, entity.getId());
 
        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(3, createAt.getTime());
        }
 
        java.util.Date publishedAt = entity.getPublishedAt();
        if (publishedAt != null) {
            stmt.bindLong(4, publishedAt.getTime());
        }
 
        String soucre = entity.getSoucre();
        if (soucre != null) {
            stmt.bindString(5, soucre);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getIsUsed() ? 1L: 0L);
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(9, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
        stmt.bindLong(11, entity.getIsHeaderTime() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCategory() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GankBean entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindLong(2, entity.getId());
 
        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(3, createAt.getTime());
        }
 
        java.util.Date publishedAt = entity.getPublishedAt();
        if (publishedAt != null) {
            stmt.bindLong(4, publishedAt.getTime());
        }
 
        String soucre = entity.getSoucre();
        if (soucre != null) {
            stmt.bindString(5, soucre);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
        stmt.bindLong(8, entity.getIsUsed() ? 1L: 0L);
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(9, author);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
        stmt.bindLong(11, entity.getIsHeaderTime() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCategory() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GankBean readEntity(Cursor cursor, int offset) {
        GankBean entity = new GankBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // createAt
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // publishedAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // soucre
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.getShort(offset + 7) != 0, // isUsed
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // author
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // desc
            cursor.getShort(offset + 10) != 0, // isHeaderTime
            cursor.getShort(offset + 11) != 0 // isCategory
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GankBean entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setCreateAt(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setPublishedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSoucre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsUsed(cursor.getShort(offset + 7) != 0);
        entity.setAuthor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsHeaderTime(cursor.getShort(offset + 10) != 0);
        entity.setIsCategory(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(GankBean entity, long rowId) {
        return entity.getObjectId();
    }
    
    @Override
    public String getKey(GankBean entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GankBean entity) {
        return entity.getObjectId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
